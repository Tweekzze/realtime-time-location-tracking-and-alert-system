================================================================================
        UNIVERSITY OF ENGINEERING AND MANAGEMENT - WILDLIFE TRACKER
                            TECHNICAL DOCUMENTATION
================================================================================

OVERVIEW:
--------
This is a real-time wildlife tracking and monitoring system designed for 
University of Engineering and Management National Park. It simulates animal 
movements and provides proximity alerts to visitors when they get too close to 
dangerous animals.

================================================================================
                               BACKEND ARCHITECTURE
================================================================================

1. SERVER FRAMEWORK & SETUP:
-----------------------------

Framework: Node.js with Express.js
- express: Web application framework for Node.js
- http: Built-in Node.js module to create HTTP server
- cors: Cross-Origin Resource Sharing middleware

Server Setup:
```javascript
const express = require('express')
const app = express();
const server = require('http').createServer(app);
```

Port Configuration:
- Development: Port 3000
- Production: Uses process.env.PORT (for deployment platforms like Render)

Static File Serving:
- Serves static files from /public directory
- Includes HTML, CSS, JavaScript, images

2. REAL-TIME COMMUNICATION - WEBSOCKETS:
---------------------------------------

Technology: Socket.IO v4.7.4
- Enables real-time bidirectional communication between client and server
- Built on top of WebSockets with fallback mechanisms

Socket.IO Server Setup:
```javascript
const socketio = require('socket.io')
const io = socketio(server)
```

3. CORS CONFIGURATION:
---------------------
```javascript
const corsOptions = {
    origin: true,  // Allow all origins
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
    credentials: true,
};
app.use(cors(corsOptions))
```

================================================================================
                               WEBSOCKET EVENTS
================================================================================

SERVER-SIDE SOCKET EVENTS:
--------------------------

1. CONNECTION EVENT:
   - Triggered when a client connects
   - Assigns unique socket.id to each user
   - Logs connection with user ID

2. CLIENT-LOCATION EVENT:
   - Receives location data from clients
   - Data Structure: {lat, lon, acc, username, platform}
   - Stores username mapping: current_users[socket.id] = username
   - Broadcasts to all clients: 'server-location' event

3. CLIENT-JOIN-LOCATION EVENT:
   - Triggered when user first joins
   - Data Structure: {lat, lon, username}
   - Broadcasts join notification to all users

4. DISCONNECT EVENT:
   - Triggered when user leaves/closes browser
   - Cleans up user data from current_users object
   - Notifies all users about disconnection

Data Storage:
- current_users = {} (In-memory storage for active users)
- Maps socket.id to username for tracking

================================================================================
                               FRONTEND ARCHITECTURE
================================================================================

1. CLIENT-SIDE TECHNOLOGIES:
---------------------------

Core Libraries:
- Socket.IO Client: Real-time communication with server
- Leaflet.js: Interactive map rendering and manipulation
- OpenStreetMap: Map tile provider (free alternative to Google Maps)
- Toastify.js: Toast notifications for alerts
- Animate.css: CSS animations for UI elements

Browser APIs Used:
- Geolocation API: navigator.geolocation.watchPosition()
- Local Storage API: For username persistence
- Platform.js: Device/browser detection

2. MAP IMPLEMENTATION:
---------------------

Map Provider: OpenStreetMap with Leaflet.js
- Base URL: "https://tile.openstreetmap.org/{z}/{x}/{y}.png"
- Alternative: Satellite view using ArcGIS tiles
- Max Zoom: 20 levels

Map Layers:
- Base map tiles
- Park boundary polygons
- Wildlife sanctuary zones
- Visitor center boundaries
- User location markers
- Animal location markers
- Distance polylines

3. COORDINATE SYSTEM:
--------------------

Park Location: University of Engineering and Management, Kolkata
- Center: 22.5603¬∞ N, 88.4903¬∞ E
- Address: University Area, Plot No. III ‚Äì B/5, New Town, Action Area ‚Äì III, Kolkata, West Bengal 700156, India
- Coordinate format: [latitude, longitude]

Boundary Definitions:
- Main Park: 53-point polygon boundary
- Wildlife Zone: 33-point polygon (high-activity area)
- Visitor Center: 13-point polygon (safe zone)

================================================================================
                               ANIMAL SIMULATION SYSTEM
================================================================================

1. ANIMAL DATA STRUCTURE:
------------------------

Each animal has:
```javascript
{
    id: 'unique_identifier',
    name: 'Animal Name',
    type: 'species',
    icon: 'emoji_icon',
    scientificName: 'Scientific classification',
    currentPos: [lat, lon],
    territory: [[lat1,lon1], [lat2,lon2], ...], // Polygon boundary
    speed: 0.0001,  // Movement speed in degrees per update
    lastUpdate: timestamp,
    direction: radians,  // Current movement direction
    dangerRadius: meters,   // Distance for danger alerts
    warningRadius: meters,  // Distance for warning alerts
    threatLevel: 'HIGH|MEDIUM|LOW|NONE',
    habitat: 'Preferred habitat description'
}
```

2. IMPLEMENTED ANIMALS (10 SPECIES):
-----------------------------------

üêÖ Raja the Tiger (Panthera tigris):
- Territory: Dense forest areas
- Danger Radius: 50 meters | Warning Radius: 100 meters
- Threat Level: HIGH | Speed: 0.0001 degrees per update

üêò Ganesha the Elephant (Elephas maximus):
- Territory: Open grasslands and water sources
- Danger Radius: 30 meters | Warning Radius: 75 meters
- Threat Level: HIGH | Speed: 0.00008 degrees per update

üêÜ Shera the Leopard (Panthera pardus):
- Territory: Rocky outcrops and dense vegetation
- Danger Radius: 40 meters | Warning Radius: 80 meters
- Threat Level: HIGH | Speed: 0.00012 degrees per update

üêª Baloo the Sloth Bear (Melursus ursinus):
- Territory: Forest undergrowth and termite mounds
- Danger Radius: 35 meters | Warning Radius: 70 meters
- Threat Level: MEDIUM | Speed: 0.00009 degrees per update

ü¶å Bambi the Spotted Deer (Axis axis):
- Territory: Open meadows and forest edges
- Danger Radius: 0 meters | Warning Radius: 20 meters
- Threat Level: NONE | Speed: 0.00015 degrees per update

ü¶ö Mayur the Peacock (Pavo cristatus):
- Territory: Forest clearings and open areas
- Danger Radius: 0 meters | Warning Radius: 15 meters
- Threat Level: NONE | Speed: 0.00011 degrees per update

ü¶ú Zazu the Rhino Hornbill (Buceros rhinoceros):
- Territory: Tall forest canopy
- Danger Radius: 0 meters | Warning Radius: 10 meters
- Threat Level: NONE | Speed: 0.00013 degrees per update

üêí Hanuman the Rhesus Monkey (Macaca mulatta):
- Territory: Tree canopies and rocky areas
- Danger Radius: 5 meters | Warning Radius: 25 meters
- Threat Level: LOW | Speed: 0.00014 degrees per update

üêä Sobek the Mugger Crocodile (Crocodylus palustris):
- Territory: Water bodies and wetlands
- Danger Radius: 45 meters | Warning Radius: 85 meters
- Threat Level: HIGH | Speed: 0.00006 degrees per update

üêó Pumba the Wild Boar (Sus scrofa):
- Territory: Dense undergrowth and muddy areas
- Danger Radius: 25 meters | Warning Radius: 50 meters
- Threat Level: MEDIUM | Speed: 0.0001 degrees per update

3. MOVEMENT ALGORITHM:
---------------------

Movement Logic:
- Updates every 2 seconds
- Random direction changes (10% probability)
- Boundary checking using ray-casting algorithm
- Territory confinement (animals bounce back if leaving territory)

```javascript
function moveAnimal(animal) {
    // Calculate time delta
    // Apply random direction changes
    // Calculate new position based on speed and direction
    // Check territory boundaries
    // Update animal position
}
```

4. TERRITORY BOUNDARY DETECTION:
-------------------------------

Ray-Casting Algorithm:
```javascript
function isPointInPolygon(point, polygon) {
    // Implementation of ray-casting algorithm
    // Determines if animal is inside its territory
    // Returns boolean
}
```

================================================================================
                               PROXIMITY ALERT SYSTEM
================================================================================

1. DISTANCE CALCULATION:
-----------------------

Haversine Formula Implementation:
- Calculates great-circle distances between two GPS coordinates
- Accounts for Earth's spherical shape
- Returns distance in meters

```javascript
function calculateDistance(lat1, lon1, lat2, lon2) {
    const R = 6371; // Earth's radius in kilometers
    // Haversine formula implementation
    return distance * 1000; // Convert to meters
}
```

2. ALERT LEVELS:
---------------

Three Alert Types:
- DANGER (üö®): Animal within danger radius - immediate action required
- WARNING (‚ö†Ô∏è): Animal within warning radius - maintain safe distance
- INFO (üìç): General park and location information

3. ALERT MANAGEMENT:
-------------------

Anti-Spam Protection:
- lastAlerts = {} stores recent alerts
- 10-second cooldown between similar alerts
- Prevents notification flooding

Alert Delivery:
- Real-time toast notifications
- Visual warnings in user dashboard
- Color-coded alert styling

================================================================================
                               GPS & LOCATION SERVICES
================================================================================

1. BROWSER GEOLOCATION API:
--------------------------

Implementation:
```javascript
navigator.geolocation.watchPosition(successCallback, errorCallback, options)
```

Options:
- enableHighAccuracy: true (GPS priority over network/cell tower)
- timeout: 3000ms (request timeout)
- maximumAge: 0 (no cached positions)

Data Retrieved:
- coords.latitude
- coords.longitude  
- coords.accuracy (in meters)
- timestamp

2. CONTINUOUS TRACKING:
----------------------

watchPosition() Benefits:
- Automatic updates when user moves
- More efficient than repeated getCurrentPosition() calls
- Real-time location streaming to server

Error Handling:
- Permission denied (error code 1)
- Position unavailable (error code 2)
- Timeout (error code 3)

================================================================================
                               DATA FLOW & COMMUNICATION
================================================================================

1. CLIENT-TO-SERVER FLOW:
-------------------------

Step 1: User opens application
Step 2: Browser requests location permission
Step 3: GPS coordinates obtained
Step 4: Socket.IO connection established
Step 5: 'client-join-location' event sent
Step 6: Continuous 'client-location' events sent (every few seconds)

2. SERVER-TO-CLIENT FLOW:
-------------------------

Step 1: Server receives location data
Step 2: Data stored in current_users object
Step 3: 'server-location' event broadcast to all clients
Step 4: All connected users see updated positions

3. REAL-TIME UPDATES:
--------------------

Update Frequency:
- User locations: Every 3-5 seconds (based on GPS accuracy)
- Animal movements: Every 2 seconds
- Proximity checks: Continuous with location updates

================================================================================
                               THIRD-PARTY APIS & SERVICES
================================================================================

1. OPENSTREETMAP API:
--------------------

Tile Server: 
- URL: https://tile.openstreetmap.org/{z}/{x}/{y}.png
- Free and open-source mapping data
- No API key required
- Attribution required

Satellite Imagery:
- Provider: ArcGIS/ESRI
- URL: https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}

2. NOMINATIM GEOCODING API:
--------------------------

Reverse Geocoding:
- URL: https://nominatim.openstreetmap.org/reverse
- Converts coordinates to human-readable addresses
- Used for location name display
- Free service with usage limits

Request Format:
```javascript
`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`
```

3. CDN SERVICES:
---------------

JavaScript Libraries:
- Socket.IO: https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.4/
- Leaflet: https://unpkg.com/leaflet@1.9.4/dist/
- Toastify: https://cdn.jsdelivr.net/npm/toastify-js
- Animate.css: https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/
- Platform.js: https://cdnjs.cloudflare.com/ajax/libs/platform/1.3.6/

Icon Fonts:
- Remix Icons: https://cdnjs.cloudflare.com/ajax/libs/remixicon/4.1.0/

================================================================================
                               FILE STRUCTURE & ORGANIZATION
================================================================================

Root Directory:
‚îú‚îÄ‚îÄ server.js                 (Main server file)
‚îú‚îÄ‚îÄ package.json              (Dependencies and scripts)
‚îú‚îÄ‚îÄ index.html                (Main HTML file)
‚îú‚îÄ‚îÄ README.md                 (Project documentation)
‚îî‚îÄ‚îÄ public/                   (Static assets)
    ‚îú‚îÄ‚îÄ images/               (Application images)
    ‚îÇ   ‚îú‚îÄ‚îÄ 3d-navigation.png
    ‚îÇ   ‚îú‚îÄ‚îÄ satellite.png
    ‚îÇ   ‚îî‚îÄ‚îÄ street.png
    ‚îú‚îÄ‚îÄ scripts/              (JavaScript files)
    ‚îÇ   ‚îú‚îÄ‚îÄ coords.js         (Coordinates and animal data)
    ‚îÇ   ‚îú‚îÄ‚îÄ methods.js        (Utility functions)
    ‚îÇ   ‚îú‚îÄ‚îÄ script.js         (Main application logic)
    ‚îÇ   ‚îî‚îÄ‚îÄ control.js        (UI controls and interactions)
    ‚îî‚îÄ‚îÄ styles/
        ‚îî‚îÄ‚îÄ style.css         (Application styling)

================================================================================
                               SECURITY CONSIDERATIONS
================================================================================

1. CORS CONFIGURATION:
---------------------
- Currently allows all origins (origin: true)
- Suitable for development and demo
- Should be restricted to specific domains in production

2. DATA VALIDATION:
------------------
- No server-side validation of location data
- Trusts client-provided coordinates
- Potential for malicious location spoofing

3. RATE LIMITING:
----------------
- No implementation of rate limiting
- Could be vulnerable to spam connections
- Consider implementing connection limits

4. AUTHENTICATION:
-----------------
- No user authentication system
- Users identified only by socket ID and username
- No persistent user accounts

================================================================================
                               PERFORMANCE & SCALABILITY
================================================================================

1. MEMORY USAGE:
---------------
- In-memory storage only (current_users object)
- Data lost on server restart
- Not suitable for large-scale deployment without database

2. CONCURRENT CONNECTIONS:
-------------------------
- Socket.IO handles multiple connections efficiently
- Limited by server resources and socket.io configuration
- No connection limits implemented

3. OPTIMIZATION OPPORTUNITIES:
-----------------------------
- Implement Redis for session storage
- Add database for persistent user data
- Implement connection pooling
- Add caching for map tiles
- Optimize animal movement calculations

================================================================================
                               DEPLOYMENT CONFIGURATION
================================================================================

1. ENVIRONMENT VARIABLES:
------------------------
- PORT: Server port (default: 3000)
- NODE_ENV: Environment mode
- No database connection variables (not implemented)

2. DEPENDENCIES:
---------------
Production Dependencies:
- express: ^4.18.2 (Web framework)
- socket.io: ^4.7.4 (Real-time communication)
- cors: ^2.8.5 (Cross-origin resource sharing)

3. BUILD PROCESS:
----------------
- No build step required (pure JavaScript)
- Static files served directly
- No transpilation or bundling

4. HOSTING REQUIREMENTS:
-----------------------
- Node.js runtime (>= 18.0.0)
- HTTP server capabilities
- WebSocket support
- Static file serving

================================================================================
                               MONITORING & LOGGING
================================================================================

1. SERVER LOGGING:
-----------------
Current Logging:
- User connections: console.log("A User connected! user id: " + socket.id)
- User disconnections: console.log('User disconnected: ' + socket.id)
- Server startup: console.log(`Server running on port ${PORT}`)

2. CLIENT-SIDE LOGGING:
----------------------
- Browser console logs for debugging
- Error handling for geolocation failures
- Platform detection logging

3. RECOMMENDED IMPROVEMENTS:
---------------------------
- Implement structured logging (Winston/Morgan)
- Add error tracking (Sentry)
- Monitor connection metrics
- Track user engagement analytics

================================================================================
                               FUTURE ENHANCEMENTS
================================================================================

1. DATABASE INTEGRATION:
-----------------------
- MongoDB/PostgreSQL for user data persistence
- Historical location tracking
- Animal movement pattern analysis

2. ADVANCED FEATURES:
--------------------
- User authentication and profiles
- Admin dashboard for park management
- Historical animal sighting data
- Weather integration
- Emergency alert system

3. MOBILE OPTIMIZATION:
----------------------
- Progressive Web App (PWA) capabilities
- Mobile-specific UI optimizations
- Offline capability
- Push notifications

4. API ENHANCEMENTS:
-------------------
- RESTful API for park data
- Public API for researchers
- Integration with wildlife databases
- Real-time weather data

================================================================================
                               TROUBLESHOOTING GUIDE
================================================================================

Common Issues:

1. Location Permission Denied:
   - User must manually allow location access
   - Check browser settings
   - HTTPS required for production

2. Socket Connection Failed:
   - Check server status
   - Verify CORS configuration
   - Network firewall issues

3. Map Not Loading:
   - Check internet connection
   - Verify OpenStreetMap accessibility
   - Browser compatibility issues

4. Animals Not Moving:
   - JavaScript execution errors
   - Check browser console for errors
   - Verify coordinate data integrity

================================================================================
                               API ENDPOINTS & USAGE
================================================================================

HTTP Endpoints:
- GET / : Serves main application (index.html)
- Static files served from /public directory

WebSocket Events:
- client-location: Send user location to server
- client-join-location: Notify server of new user
- server-location: Receive location updates from server
- client-join-server: Receive join notifications
- disconnected_user: Receive disconnect notifications

================================================================================
                               CONCLUSION
================================================================================

This wildlife tracking system demonstrates real-time web application development
using modern technologies. It combines GPS tracking, WebSocket communication,
interactive mapping, and wildlife simulation to create an engaging educational
tool for national park management and visitor safety.

The architecture is designed for simplicity and demonstration purposes, with
clear opportunities for enhancement and production-ready improvements.

Last Updated: August 30, 2025
Documentation Version: 1.0